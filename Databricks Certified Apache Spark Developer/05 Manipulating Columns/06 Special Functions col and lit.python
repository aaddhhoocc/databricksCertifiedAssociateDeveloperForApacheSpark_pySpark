{"version":"NotebookV1","origId":1575837098435284,"name":"06 Special Functions col and lit","language":"python","commands":[{"version":"CommandV1","origId":1575837098435285,"guid":"3a546e14-549d-4e90-9e6c-b457ec8120dd","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n## Special Functions - col and lit\n\nLet us understand special functions such as col and lit. These functions are typically used to convert the strings to column type.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"5d7ae6d8-d528-477e-9bb5-c77247b8aacb"},{"version":"CommandV1","origId":1575837098435286,"guid":"58edebd4-7bdd-4f0f-8e20-3a801f2d5cfd","subtype":"command","commandType":"auto","position":3.0,"command":"%md\n* First let us create Data Frame for demo purposes.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"9cadae5f-9e34-49b4-b733-c3b24152a6de"},{"version":"CommandV1","origId":1575837098435287,"guid":"dd52c3d4-705b-40d6-9e4e-69252c5cd179","subtype":"command","commandType":"auto","position":4.0,"command":"%md\nLet us start spark context for this Notebook so that we can execute the code provided. You can sign up for our [10 node state of the art cluster/labs](https://labs.itversity.com/plans) to learn Spark SQL using our unique integrated LMS.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"6a7b38c1-6c2b-48f4-8cb8-c7092e24d222"},{"version":"CommandV1","origId":1575837098435288,"guid":"f3c26ef0-1191-46d9-84be-80f51f6a31a4","subtype":"command","commandType":"auto","position":7.0,"command":"employees = [(1, \"Scott\", \"Tiger\", 1000.0, \n                      \"united states\", \"+1 123 456 7890\", \"123 45 6789\"\n                     ),\n                     (2, \"Henry\", \"Ford\", 1250.0, \n                      \"India\", \"+91 234 567 8901\", \"456 78 9123\"\n                     ),\n                     (3, \"Nick\", \"Junior\", 750.0, \n                      \"united KINGDOM\", \"+44 111 111 1111\", \"222 33 4444\"\n                     ),\n                     (4, \"Bill\", \"Gomes\", 1500.0, \n                      \"AUSTRALIA\", \"+61 987 654 3210\", \"789 12 6118\"\n                     )\n                ]","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159766439,"submitTime":1641159766420,"finishTime":1641159766458,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"a1152c6b-fdc9-40c9-8abd-c10b2e5689bc"},{"version":"CommandV1","origId":1575837098435289,"guid":"4bf6c8be-3ef7-4833-acc8-3cacb75567a3","subtype":"command","commandType":"auto","position":8.0,"command":"employeesDF = spark. \\\n    createDataFrame(employees,\n                    schema=\"\"\"employee_id INT, first_name STRING, \n                    last_name STRING, salary FLOAT, nationality STRING,\n                    phone_number STRING, ssn STRING\"\"\"\n                   )","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"employeesDF","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"employee_id","nullable":true,"type":"integer"},{"metadata":{},"name":"first_name","nullable":true,"type":"string"},{"metadata":{},"name":"last_name","nullable":true,"type":"string"},{"metadata":{},"name":"salary","nullable":true,"type":"float"},{"metadata":{},"name":"nationality","nullable":true,"type":"string"},{"metadata":{},"name":"phone_number","nullable":true,"type":"string"},{"metadata":{},"name":"ssn","nullable":true,"type":"string"}],"type":"struct"},"tableIdentifier":null}],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159767562,"submitTime":1641159767543,"finishTime":1641159767662,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"f6d37ee2-fb90-4594-9dec-da450651dc62"},{"version":"CommandV1","origId":1575837098435290,"guid":"0ad6fbfe-6def-4ceb-bcc0-208f4c34675d","subtype":"command","commandType":"auto","position":9.0,"command":"%md\n* For Data Frame APIs such as `select`, `groupBy`, `orderBy` etc we can pass column names as strings.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"136acc74-50a1-406c-9838-cbd462fa2f55"},{"version":"CommandV1","origId":1575837098435291,"guid":"330ed1bc-af73-4718-8498-b9aa002e6c7a","subtype":"command","commandType":"auto","position":10.0,"command":"employeesDF. \\\n    select(\"first_name\", \"last_name\"). \\\n    show()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+----------+---------+\n|first_name|last_name|\n+----------+---------+\n|     Scott|    Tiger|\n|     Henry|     Ford|\n|      Nick|   Junior|\n|      Bill|    Gomes|\n+----------+---------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159769464,"submitTime":1641159769445,"finishTime":1641159769669,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"7232976e-703a-4fb2-9249-7f407680ddf4"},{"version":"CommandV1","origId":1575837098435292,"guid":"18a80f40-ec0f-43e2-98d1-1172b16bde56","subtype":"command","commandType":"auto","position":11.0,"command":"employeesDF. \\\n    groupBy(\"nationality\"). \\\n    count(). \\\n    show()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+--------------+-----+\n|   nationality|count|\n+--------------+-----+\n| united states|    1|\n|         India|    1|\n|united KINGDOM|    1|\n|     AUSTRALIA|    1|\n+--------------+-----+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159770207,"submitTime":1641159770187,"finishTime":1641159770755,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"085b9087-34be-4811-a2fa-d25a2eb8ae8a"},{"version":"CommandV1","origId":1575837098435293,"guid":"421c2f4b-1d92-40df-9f49-777bb16e4f4e","subtype":"command","commandType":"auto","position":12.0,"command":"employeesDF. \\\n    orderBy(\"employee_id\"). \\\n    show()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+-----------+----------+---------+------+--------------+----------------+-----------+\n|employee_id|first_name|last_name|salary|   nationality|    phone_number|        ssn|\n+-----------+----------+---------+------+--------------+----------------+-----------+\n|          1|     Scott|    Tiger|1000.0| united states| +1 123 456 7890|123 45 6789|\n|          2|     Henry|     Ford|1250.0|         India|+91 234 567 8901|456 78 9123|\n|          3|      Nick|   Junior| 750.0|united KINGDOM|+44 111 111 1111|222 33 4444|\n|          4|      Bill|    Gomes|1500.0|     AUSTRALIA|+61 987 654 3210|789 12 6118|\n+-----------+----------+---------+------+--------------+----------------+-----------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159770968,"submitTime":1641159770949,"finishTime":1641159771208,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"98dd08c1-e7f4-4206-a377-56196e6fd320"},{"version":"CommandV1","origId":1575837098435294,"guid":"9f05e5b0-e0c2-4297-aaba-536856bdbe2d","subtype":"command","commandType":"auto","position":13.0,"command":"%md\n* If there are no transformations on any column in any function then we should be able to pass all column names as strings.\n* If not we need to pass all columns as type column by using col function.\n* If we want to apply transformations using some of the functions then passing column names as strings will not suffice. We have to pass them as column type.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"3d2796b7-ab4f-432e-b1dc-f056b37cd161"},{"version":"CommandV1","origId":1575837098435295,"guid":"f3a44f46-851b-41c6-9172-cb2dca625f90","subtype":"command","commandType":"auto","position":14.0,"command":"from pyspark.sql.functions import col","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159772656,"submitTime":1641159772636,"finishTime":1641159772677,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"3c376fd2-9e4f-4d9a-8ce7-ed167437af66"},{"version":"CommandV1","origId":1575837098435296,"guid":"8e38df5e-bbb2-438d-b260-e55aa7d64968","subtype":"command","commandType":"auto","position":15.0,"command":"employeesDF. \\\n    select(col(\"first_name\"), col(\"last_name\")). \\\n    show()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+----------+---------+\n|first_name|last_name|\n+----------+---------+\n|     Scott|    Tiger|\n|     Henry|     Ford|\n|      Nick|   Junior|\n|      Bill|    Gomes|\n+----------+---------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159773879,"submitTime":1641159773859,"finishTime":1641159774066,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"f7d02087-280b-4feb-985a-c10e10bb6aa5"},{"version":"CommandV1","origId":1575837098435297,"guid":"82b317d7-c10a-4551-8c6f-06c8a6f24f2f","subtype":"command","commandType":"auto","position":16.0,"command":"from pyspark.sql.functions import upper","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159774747,"submitTime":1641159774725,"finishTime":1641159774766,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"d64e41e6-3f7e-4502-9776-592d7443b874"},{"version":"CommandV1","origId":1575837098435298,"guid":"fe17b167-005b-4751-bf5b-611627724c98","subtype":"command","commandType":"auto","position":17.0,"command":"employeesDF. \\\n    select(upper(\"first_name\"), upper(\"last_name\")). \\\n    show()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+-----------------+----------------+\n|upper(first_name)|upper(last_name)|\n+-----------------+----------------+\n|            SCOTT|           TIGER|\n|            HENRY|            FORD|\n|             NICK|          JUNIOR|\n|             BILL|           GOMES|\n+-----------------+----------------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159775660,"submitTime":1641159775639,"finishTime":1641159775871,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"947e840b-6852-4e6a-81b1-82d5f90cd4f8"},{"version":"CommandV1","origId":1575837098435299,"guid":"bac88860-f813-4946-ad85-8b19a5a19969","subtype":"command","commandType":"auto","position":18.0,"command":"%md\n* `col` is the function which will convert column name from string type to **Column** type. We can also refer column names as **Column** type using Data Frame name.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"f9b91b91-7494-4fd5-ab14-02b644a5cf60"},{"version":"CommandV1","origId":1575837098435300,"guid":"73ed0853-09a9-4a41-81dc-c48cdeb9f6de","subtype":"command","commandType":"auto","position":19.0,"command":"from pyspark.sql.functions import col, upper","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159777404,"submitTime":1641159777384,"finishTime":1641159777420,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"eeed0807-22eb-4e60-8327-d975f834042d"},{"version":"CommandV1","origId":1575837098435301,"guid":"8b132fd2-35f9-407d-90e4-b59f7016f35e","subtype":"command","commandType":"auto","position":20.0,"command":"employeesDF. \\\n    select(upper(col(\"first_name\")), upper(col(\"last_name\"))). \\\n    show()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+-----------------+----------------+\n|upper(first_name)|upper(last_name)|\n+-----------------+----------------+\n|            SCOTT|           TIGER|\n|            HENRY|            FORD|\n|             NICK|          JUNIOR|\n|             BILL|           GOMES|\n+-----------------+----------------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159778368,"submitTime":1641159778348,"finishTime":1641159778515,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"c098164f-265d-456f-b0c5-90af341babfa"},{"version":"CommandV1","origId":1575837098435302,"guid":"32fe4739-31fc-4481-94b4-c669d4791362","subtype":"command","commandType":"auto","position":21.0,"command":"employeesDF. \\\n    groupBy(upper(col(\"nationality\"))). \\\n    count(). \\\n    show()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+------------------+-----+\n|upper(nationality)|count|\n+------------------+-----+\n|     UNITED STATES|    1|\n|             INDIA|    1|\n|    UNITED KINGDOM|    1|\n|         AUSTRALIA|    1|\n+------------------+-----+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159779676,"submitTime":1641159779655,"finishTime":1641159780336,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"41956c5b-6ba5-4f15-8b71-e9f69c01fecf"},{"version":"CommandV1","origId":1575837098435303,"guid":"51503582-4dc5-4125-bb7d-fa22e42bb362","subtype":"command","commandType":"auto","position":22.0,"command":"%md\n* Also, if we want to use functions such as `alias`, `desc` etc on columns then we have to pass the column names as column type (not as strings).","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"9de6742d-de5e-490f-a7ba-22465b758a1e"},{"version":"CommandV1","origId":1575837098435304,"guid":"3389cb77-a771-4f94-841a-e102933527e0","subtype":"command","commandType":"auto","position":23.0,"command":"# This will fail as the function desc is available only on column type.\nemployeesDF. \\\n    orderBy(\"employee_id\".desc()). \\\n    show()","commandVersion":1,"state":"error","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":"<span class=\"ansi-red-fg\">AttributeError</span>: &#39;str&#39; object has no attribute &#39;desc&#39;","errorTraceType":"html","error":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AttributeError</span>                            Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-1603018110318778&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      1</span> <span class=\"ansi-red-fg\"># This will fail as the function desc is available only on column type.</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      2</span> employeesDF<span class=\"ansi-blue-fg\">.</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">\\</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span><span class=\"ansi-red-fg\">     </span>orderBy<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;employee_id&#34;</span><span class=\"ansi-blue-fg\">.</span>desc<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">\\</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      4</span>     show<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-red-fg\">AttributeError</span>: &#39;str&#39; object has no attribute &#39;desc&#39;</div>","workflows":[],"startTime":1641159781768,"submitTime":1641159781768,"finishTime":1641159781869,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"88dbf89c-9ed7-4b84-a607-01b5bdb86f85"},{"version":"CommandV1","origId":1575837098435305,"guid":"ca521f21-c83d-45fc-9ab3-cdb5e0cf8b5d","subtype":"command","commandType":"auto","position":24.0,"command":"# We can invoke desc on columns which are of type column\nemployeesDF. \\\n    orderBy(col(\"employee_id\").desc()). \\\n    show()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+-----------+----------+---------+------+--------------+----------------+-----------+\n|employee_id|first_name|last_name|salary|   nationality|    phone_number|        ssn|\n+-----------+----------+---------+------+--------------+----------------+-----------+\n|          4|      Bill|    Gomes|1500.0|     AUSTRALIA|+61 987 654 3210|789 12 6118|\n|          3|      Nick|   Junior| 750.0|united KINGDOM|+44 111 111 1111|222 33 4444|\n|          2|     Henry|     Ford|1250.0|         India|+91 234 567 8901|456 78 9123|\n|          1|     Scott|    Tiger|1000.0| united states| +1 123 456 7890|123 45 6789|\n+-----------+----------+---------+------+--------------+----------------+-----------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159783249,"submitTime":1641159783230,"finishTime":1641159783505,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"89dd4c96-6257-429a-9046-bc2bc409959d"},{"version":"CommandV1","origId":1575837098435306,"guid":"6f692eea-6d84-4ce6-b16b-4f224626d976","subtype":"command","commandType":"auto","position":25.0,"command":"employeesDF. \\\n    orderBy(col(\"first_name\").desc()). \\\n    show()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+-----------+----------+---------+------+--------------+----------------+-----------+\n|employee_id|first_name|last_name|salary|   nationality|    phone_number|        ssn|\n+-----------+----------+---------+------+--------------+----------------+-----------+\n|          1|     Scott|    Tiger|1000.0| united states| +1 123 456 7890|123 45 6789|\n|          3|      Nick|   Junior| 750.0|united KINGDOM|+44 111 111 1111|222 33 4444|\n|          2|     Henry|     Ford|1250.0|         India|+91 234 567 8901|456 78 9123|\n|          4|      Bill|    Gomes|1500.0|     AUSTRALIA|+61 987 654 3210|789 12 6118|\n+-----------+----------+---------+------+--------------+----------------+-----------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159784376,"submitTime":1641159784356,"finishTime":1641159784510,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"ecd9df1e-9dd4-4f0e-8f9f-3114413abe0e"},{"version":"CommandV1","origId":1575837098435307,"guid":"955038e1-d6a3-4f75-b10c-c826e67d187b","subtype":"command","commandType":"auto","position":26.0,"command":"# Alternative - we can also refer column names using Data Frame like this\nemployeesDF. \\\n    orderBy(upper(employeesDF['first_name']).alias('first_name')). \\\n    show()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+-----------+----------+---------+------+--------------+----------------+-----------+\n|employee_id|first_name|last_name|salary|   nationality|    phone_number|        ssn|\n+-----------+----------+---------+------+--------------+----------------+-----------+\n|          4|      Bill|    Gomes|1500.0|     AUSTRALIA|+61 987 654 3210|789 12 6118|\n|          2|     Henry|     Ford|1250.0|         India|+91 234 567 8901|456 78 9123|\n|          3|      Nick|   Junior| 750.0|united KINGDOM|+44 111 111 1111|222 33 4444|\n|          1|     Scott|    Tiger|1000.0| united states| +1 123 456 7890|123 45 6789|\n+-----------+----------+---------+------+--------------+----------------+-----------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159785538,"submitTime":1641159785518,"finishTime":1641159785669,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"b5fe1735-cdfa-4ef6-a4d3-2b4ab87e6457"},{"version":"CommandV1","origId":1575837098435308,"guid":"c380900e-2aff-4cd0-b724-24385e9c5478","subtype":"command","commandType":"auto","position":27.0,"command":"# Alternative - we can also refer column names using Data Frame like this\nemployeesDF. \\\n    orderBy(upper(employeesDF.first_name).alias('first_name')). \\\n    show()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+-----------+----------+---------+------+--------------+----------------+-----------+\n|employee_id|first_name|last_name|salary|   nationality|    phone_number|        ssn|\n+-----------+----------+---------+------+--------------+----------------+-----------+\n|          4|      Bill|    Gomes|1500.0|     AUSTRALIA|+61 987 654 3210|789 12 6118|\n|          2|     Henry|     Ford|1250.0|         India|+91 234 567 8901|456 78 9123|\n|          3|      Nick|   Junior| 750.0|united KINGDOM|+44 111 111 1111|222 33 4444|\n|          1|     Scott|    Tiger|1000.0| united states| +1 123 456 7890|123 45 6789|\n+-----------+----------+---------+------+--------------+----------------+-----------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159786720,"submitTime":1641159786699,"finishTime":1641159786853,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"ac1058dc-be06-477e-b539-10308ab50302"},{"version":"CommandV1","origId":1575837098435309,"guid":"d87afbd3-2b25-46de-9dbc-d42b319f5e70","subtype":"command","commandType":"auto","position":28.0,"command":"%md\n* Sometimes, we want to add a literal to the column values. For example, we might want to concatenate first_name and last_name separated by comma and space in between.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"d7cc164f-4d06-47af-be09-9c7348beee46"},{"version":"CommandV1","origId":1575837098435310,"guid":"638a0781-a804-49ae-997b-42a40bdf6f5b","subtype":"command","commandType":"auto","position":29.0,"command":"from pyspark.sql.functions import concat","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159789138,"submitTime":1641159789116,"finishTime":1641159789157,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"3186b879-7a64-4ae8-8034-8852d1ae3121"},{"version":"CommandV1","origId":1575837098435311,"guid":"02121ba9-ade2-4174-add7-8dcd223805f9","subtype":"command","commandType":"auto","position":30.0,"command":"# Same as above\nemployeesDF. \\\n    select(concat(col(\"first_name\"), \", \", col(\"last_name\"))). \\\n    show()","commandVersion":1,"state":"error","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":"<span class=\"ansi-red-fg\">AnalysisException</span>: cannot resolve &#39;`, `&#39; given input columns: [employee_id, first_name, last_name, nationality, phone_number, salary, ssn];","errorTraceType":"html","error":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AnalysisException</span>                         Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-1603018110318785&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      1</span> <span class=\"ansi-red-fg\"># Same as above</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span><span class=\"ansi-red-fg\"> </span>employeesDF<span class=\"ansi-blue-fg\">.</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">\\</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      3</span>     select<span class=\"ansi-blue-fg\">(</span>concat<span class=\"ansi-blue-fg\">(</span>col<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;first_name&#34;</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;, &#34;</span><span class=\"ansi-blue-fg\">,</span> col<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;last_name&#34;</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">\\</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      4</span>     show<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/dataframe.py</span> in <span class=\"ansi-cyan-fg\">select</span><span class=\"ansi-blue-fg\">(self, *cols)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1690</span>         <span class=\"ansi-blue-fg\">[</span>Row<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-blue-fg\">&#39;Alice&#39;</span><span class=\"ansi-blue-fg\">,</span> age<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-cyan-fg\">12</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">,</span> Row<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-blue-fg\">&#39;Bob&#39;</span><span class=\"ansi-blue-fg\">,</span> age<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-cyan-fg\">15</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">]</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1691</span>         &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">-&gt; 1692</span><span class=\"ansi-red-fg\">         </span>jdf <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>_jdf<span class=\"ansi-blue-fg\">.</span>select<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">.</span>_jcols<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">*</span>cols<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1693</span>         <span class=\"ansi-green-fg\">return</span> DataFrame<span class=\"ansi-blue-fg\">(</span>jdf<span class=\"ansi-blue-fg\">,</span> self<span class=\"ansi-blue-fg\">.</span>sql_ctx<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1694</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansi-cyan-fg\">__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1302</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">   1303</span>         answer <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>gateway_client<span class=\"ansi-blue-fg\">.</span>send_command<span class=\"ansi-blue-fg\">(</span>command<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">-&gt; 1304</span><span class=\"ansi-red-fg\">         return_value = get_return_value(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">   1305</span>             answer, self.gateway_client, self.target_id, self.name)\n<span class=\"ansi-green-intense-fg ansi-bold\">   1306</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansi-cyan-fg\">deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    121</span>                 <span class=\"ansi-red-fg\"># Hide where the exception came from that shows a non-Pythonic</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    122</span>                 <span class=\"ansi-red-fg\"># JVM exception message.</span>\n<span class=\"ansi-green-fg\">--&gt; 123</span><span class=\"ansi-red-fg\">                 </span><span class=\"ansi-green-fg\">raise</span> converted <span class=\"ansi-green-fg\">from</span> <span class=\"ansi-green-fg\">None</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    124</span>             <span class=\"ansi-green-fg\">else</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    125</span>                 <span class=\"ansi-green-fg\">raise</span>\n\n<span class=\"ansi-red-fg\">AnalysisException</span>: cannot resolve &#39;`, `&#39; given input columns: [employee_id, first_name, last_name, nationality, phone_number, salary, ssn];\n&#39;Project [concat(first_name#1237, &#39;, , last_name#1238) AS concat(first_name, , , last_name)#1500]\n+- LogicalRDD [employee_id#1236, first_name#1237, last_name#1238, salary#1239, nationality#1240, phone_number#1241, ssn#1242], false\n</div>","workflows":[],"startTime":1641159790270,"submitTime":1641159790270,"finishTime":1641159790417,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"a85f5274-d48d-471c-91fb-dec723676b3e"},{"version":"CommandV1","origId":1575837098435312,"guid":"14231058-e0f5-4a9f-b9aa-f4ae727f138c","subtype":"command","commandType":"auto","position":31.0,"command":"# Referring columns using Data Frame\nemployeesDF. \\\n    select(concat(employeesDF[\"first_name\"], \", \", employeesDF[\"last_name\"])). \\\n    show()","commandVersion":1,"state":"error","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":"<span class=\"ansi-red-fg\">AnalysisException</span>: cannot resolve &#39;`, `&#39; given input columns: [employee_id, first_name, last_name, nationality, phone_number, salary, ssn];","errorTraceType":"html","error":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AnalysisException</span>                         Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-1603018110318786&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      1</span> <span class=\"ansi-red-fg\"># Referring columns using Data Frame</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span><span class=\"ansi-red-fg\"> </span>employeesDF<span class=\"ansi-blue-fg\">.</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">\\</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      3</span>     select<span class=\"ansi-blue-fg\">(</span>concat<span class=\"ansi-blue-fg\">(</span>employeesDF<span class=\"ansi-blue-fg\">[</span><span class=\"ansi-blue-fg\">&#34;first_name&#34;</span><span class=\"ansi-blue-fg\">]</span><span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;, &#34;</span><span class=\"ansi-blue-fg\">,</span> employeesDF<span class=\"ansi-blue-fg\">[</span><span class=\"ansi-blue-fg\">&#34;last_name&#34;</span><span class=\"ansi-blue-fg\">]</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">\\</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      4</span>     show<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/dataframe.py</span> in <span class=\"ansi-cyan-fg\">select</span><span class=\"ansi-blue-fg\">(self, *cols)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1690</span>         <span class=\"ansi-blue-fg\">[</span>Row<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-blue-fg\">&#39;Alice&#39;</span><span class=\"ansi-blue-fg\">,</span> age<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-cyan-fg\">12</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">,</span> Row<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-blue-fg\">&#39;Bob&#39;</span><span class=\"ansi-blue-fg\">,</span> age<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-cyan-fg\">15</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">]</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1691</span>         &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">-&gt; 1692</span><span class=\"ansi-red-fg\">         </span>jdf <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>_jdf<span class=\"ansi-blue-fg\">.</span>select<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">.</span>_jcols<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">*</span>cols<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1693</span>         <span class=\"ansi-green-fg\">return</span> DataFrame<span class=\"ansi-blue-fg\">(</span>jdf<span class=\"ansi-blue-fg\">,</span> self<span class=\"ansi-blue-fg\">.</span>sql_ctx<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1694</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansi-cyan-fg\">__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1302</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">   1303</span>         answer <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>gateway_client<span class=\"ansi-blue-fg\">.</span>send_command<span class=\"ansi-blue-fg\">(</span>command<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">-&gt; 1304</span><span class=\"ansi-red-fg\">         return_value = get_return_value(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">   1305</span>             answer, self.gateway_client, self.target_id, self.name)\n<span class=\"ansi-green-intense-fg ansi-bold\">   1306</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansi-cyan-fg\">deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    121</span>                 <span class=\"ansi-red-fg\"># Hide where the exception came from that shows a non-Pythonic</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    122</span>                 <span class=\"ansi-red-fg\"># JVM exception message.</span>\n<span class=\"ansi-green-fg\">--&gt; 123</span><span class=\"ansi-red-fg\">                 </span><span class=\"ansi-green-fg\">raise</span> converted <span class=\"ansi-green-fg\">from</span> <span class=\"ansi-green-fg\">None</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    124</span>             <span class=\"ansi-green-fg\">else</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    125</span>                 <span class=\"ansi-green-fg\">raise</span>\n\n<span class=\"ansi-red-fg\">AnalysisException</span>: cannot resolve &#39;`, `&#39; given input columns: [employee_id, first_name, last_name, nationality, phone_number, salary, ssn];\n&#39;Project [concat(first_name#1237, &#39;, , last_name#1238) AS concat(first_name, , , last_name)#1501]\n+- LogicalRDD [employee_id#1236, first_name#1237, last_name#1238, salary#1239, nationality#1240, phone_number#1241, ssn#1242], false\n</div>","workflows":[],"startTime":1641159791440,"submitTime":1641159791440,"finishTime":1641159791557,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"506a3435-86d0-4f01-ac15-c4997534eef1"},{"version":"CommandV1","origId":1575837098435313,"guid":"bbfeebdb-4848-4da1-b3c5-a4c7b0c8214b","subtype":"command","commandType":"auto","position":32.0,"command":"%md\n* If we pass the literals directly in the form of string or numeric type, then it will fail. It will search for column by name using the string passed. In this example, it will check for column by name `, ` (comma followed by space).\n* We have to convert literals to column type by using `lit` function.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"1339d97b-debf-4eac-ba2c-fc0ce0a9b87c"},{"version":"CommandV1","origId":1575837098435314,"guid":"6e4fe94a-8424-49d6-8d16-21450178c34c","subtype":"command","commandType":"auto","position":33.0,"command":"from pyspark.sql.functions import concat, col, lit\n\nemployeesDF. \\\n    select(concat(col(\"first_name\"), \n                  lit(\", \"), \n                  col(\"last_name\")\n                 ).alias(\"full_name\")\n          ). \\\n    show(truncate=False)","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+------------+\n|full_name   |\n+------------+\n|Scott, Tiger|\n|Henry, Ford |\n|Nick, Junior|\n|Bill, Gomes |\n+------------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641159792665,"submitTime":1641159792646,"finishTime":1641159793007,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{"pycharm":{"name":"#%%\n"}},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"84701afe-305f-4d09-87e0-1877714c299c"},{"version":"CommandV1","origId":1575837098435315,"guid":"41c7d942-b8d7-43cf-81cc-987c3305f34a","subtype":"command","commandType":"auto","position":34.0,"command":"","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"de223de7-8cdd-47a6-898a-82fd303d6e49"}],"dashboards":[],"guid":"099a24ff-bb54-4226-8139-81a23a9b0b30","globalVars":{},"iPythonMetadata":{"nbformat":4,"IPythonMetadata":{"kernelspec":{"display_name":"Pyspark 2","language":"python","name":"pyspark2"},"language_info":{"mimetype":"text/x-python","name":"python","pygments_lexer":"ipython3","codemirror_mode":{"name":"ipython","version":3},"version":"3.6.12","nbconvert_exporter":"python","file_extension":".py"}}},"inputWidgets":{},"notebookMetadata":{"pythonIndentUnit":4}}