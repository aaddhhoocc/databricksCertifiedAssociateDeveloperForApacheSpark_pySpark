{"version":"NotebookV1","origId":1575837098435532,"name":"07 Dropping Duplicate Records from Spark Data Frames","language":"python","commands":[{"version":"CommandV1","origId":1575837098435533,"guid":"43f80704-e415-4dc0-a239-3d86e53e82c9","subtype":"command","commandType":"auto","position":0.5,"command":"%md\n\nHere are the features that are available with respect to dropping duplicate records.\n* Drop duplicates based on all columns. It is also known as distinct.\n* Drop duplicates based on certain columns.\n* We can use `distinct`, `drop_duplicates` or `dropDuplicates` for these scenarios.","commandVersion":75,"state":"error","results":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"c778678c-ff19-4647-8d88-88aaee5cbd42"},{"version":"CommandV1","origId":1575837098435534,"guid":"ecaf2153-1620-4659-abb3-8c17c15a6c03","subtype":"command","commandType":"auto","position":1.0,"command":"import datetime\nusers = [\n    {\n        \"id\": 1,\n        \"first_name\": \"Corrie\",\n        \"last_name\": \"Van den Oord\",\n        \"email\": \"cvandenoord0@etsy.com\",\n        \"is_customer\": True,\n        \"amount_paid\": 1000.55,\n        \"customer_from\": datetime.date(2021, 1, 15),\n        \"last_updated_ts\": datetime.datetime(2021, 2, 10, 1, 15, 0)\n    },\n    {\n        \"id\": 2,\n        \"first_name\": \"Nikolaus\",\n        \"last_name\": \"Brewitt\",\n        \"email\": \"nbrewitt1@dailymail.co.uk\",\n        \"is_customer\": True,\n        \"amount_paid\": 900.0,\n        \"customer_from\": datetime.date(2021, 2, 14),\n        \"last_updated_ts\": datetime.datetime(2021, 2, 18, 3, 33, 0)\n    },\n    {\n        \"id\": 3,\n        \"first_name\": \"Orelie\",\n        \"last_name\": \"Penney\",\n        \"email\": \"openney2@vistaprint.com\",\n        \"is_customer\": True,\n        \"amount_paid\": 850.55,\n        \"customer_from\": datetime.date(2021, 1, 21),\n        \"last_updated_ts\": datetime.datetime(2021, 3, 15, 15, 16, 55)\n    },\n    {\n        \"id\": 3,\n        \"first_name\": \"Orelie\",\n        \"last_name\": \"Penney\",\n        \"email\": \"openney2@vistaprint.com\",\n        \"is_customer\": True,\n        \"amount_paid\": 850.55,\n        \"customer_from\": datetime.date(2021, 1, 21),\n        \"last_updated_ts\": datetime.datetime(2021, 3, 15, 15, 16, 55)\n    },\n    {\n        \"id\": 4,\n        \"first_name\": \"Ashby\",\n        \"last_name\": \"Maddocks\",\n        \"email\": \"amaddocks3@home.pl\",\n        \"is_customer\": False,\n        \"amount_paid\": None,\n        \"customer_from\": None,\n        \"last_updated_ts\": datetime.datetime(2021, 4, 10, 17, 45, 30)\n    },\n    {\n        \"id\": 4,\n        \"first_name\": \"Ashby\",\n        \"last_name\": \"Maddocks\",\n        \"email\": \"amaddocks3@home.pl\",\n        \"is_customer\": False,\n        \"amount_paid\": None,\n        \"customer_from\": None,\n        \"last_updated_ts\": datetime.datetime(2021, 4, 10, 17, 45, 30)\n    },\n    {\n        \"id\": 5,\n        \"first_name\": \"Kurt\",\n        \"last_name\": \"Rome\",\n        \"email\": \"krome4@shutterfly.com\",\n        \"is_customer\": False,\n        \"amount_paid\": None,\n        \"customer_from\": None,\n        \"last_updated_ts\": datetime.datetime(2021, 4, 2, 0, 55, 18)\n    },\n    {\n        \"id\": 2,\n        \"first_name\": \"Nikolaus\",\n        \"last_name\": \"Brewitt\",\n        \"email\": \"nbrewitt1@dailymail.co.uk\",\n        \"is_customer\": True,\n        \"amount_paid\": 1050.0,\n        \"customer_from\": datetime.date(2021, 2, 14),\n        \"last_updated_ts\": datetime.datetime(2021, 2, 25, 3, 33, 0)\n    }\n]\n\n\nimport pandas as pd\nusers_df = spark.createDataFrame(pd.DataFrame(users))","commandVersion":63,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"users_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"id","nullable":true,"type":"long"},{"metadata":{},"name":"first_name","nullable":true,"type":"string"},{"metadata":{},"name":"last_name","nullable":true,"type":"string"},{"metadata":{},"name":"email","nullable":true,"type":"string"},{"metadata":{},"name":"is_customer","nullable":true,"type":"boolean"},{"metadata":{},"name":"amount_paid","nullable":true,"type":"double"},{"metadata":{},"name":"customer_from","nullable":true,"type":"date"},{"metadata":{},"name":"last_updated_ts","nullable":true,"type":"timestamp"}],"type":"struct"},"tableIdentifier":null}],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641898124597,"submitTime":1641898124554,"finishTime":1641898124688,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"0160f05b-b18d-4b3c-815c-e39454b704d2"},{"version":"CommandV1","origId":1575837098435535,"guid":"04885730-e7d4-47b6-97d3-b8d237f7b786","subtype":"command","commandType":"auto","position":2.0,"command":"users_df.show()","commandVersion":3,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n| id|first_name|   last_name|               email|is_customer|amount_paid|customer_from|    last_updated_ts|\n+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n|  1|    Corrie|Van den Oord|cvandenoord0@etsy...|       true|    1000.55|   2021-01-15|2021-02-10 01:15:00|\n|  2|  Nikolaus|     Brewitt|nbrewitt1@dailyma...|       true|      900.0|   2021-02-14|2021-02-18 03:33:00|\n|  3|    Orelie|      Penney|openney2@vistapri...|       true|     850.55|   2021-01-21|2021-03-15 15:16:55|\n|  3|    Orelie|      Penney|openney2@vistapri...|       true|     850.55|   2021-01-21|2021-03-15 15:16:55|\n|  4|     Ashby|    Maddocks|  amaddocks3@home.pl|      false|        NaN|         null|2021-04-10 17:45:30|\n|  4|     Ashby|    Maddocks|  amaddocks3@home.pl|      false|        NaN|         null|2021-04-10 17:45:30|\n|  5|      Kurt|        Rome|krome4@shutterfly...|      false|        NaN|         null|2021-04-02 00:55:18|\n|  2|  Nikolaus|     Brewitt|nbrewitt1@dailyma...|       true|     1050.0|   2021-02-14|2021-02-25 03:33:00|\n+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641898654219,"submitTime":1641898654175,"finishTime":1641898656262,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"d5a54490-651f-4347-9e9c-bb7cc1ca2fd7"},{"version":"CommandV1","origId":1575837098435536,"guid":"3c93daeb-44c1-4fec-a2e3-d249cd454bbb","subtype":"command","commandType":"auto","position":3.0,"command":"users_df.count()","commandVersion":3,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">Out[7]: 8</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641898665050,"submitTime":1641898665025,"finishTime":1641898666037,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"bd3f6a2b-9500-4ca9-9aa1-bf230ebf38e6"},{"version":"CommandV1","origId":1575837098435537,"guid":"af5f89c6-0c67-469e-9707-5191fba63468","subtype":"command","commandType":"auto","position":3.5,"command":"help(users_df.distinct)","commandVersion":6,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">Help on method distinct in module pyspark.sql.dataframe:\n\ndistinct() method of pyspark.sql.dataframe.DataFrame instance\n    Returns a new :class:`DataFrame` containing the distinct rows in this :class:`DataFrame`.\n    \n    .. versionadded:: 1.3.0\n    \n    Examples\n    --------\n    &gt;&gt;&gt; df.distinct().count()\n    2\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641898735040,"submitTime":1641898735011,"finishTime":1641898735073,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"289c8e17-f6bc-4523-9f27-02ae9391e0a4"},{"version":"CommandV1","origId":1575837098435538,"guid":"e6fc8f8d-700b-4d24-a518-6852f12425ed","subtype":"command","commandType":"auto","position":4.0,"command":"# Drops exact duplicates\nusers_df.distinct().show()","commandVersion":12,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n| id|first_name|   last_name|               email|is_customer|amount_paid|customer_from|    last_updated_ts|\n+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n|  1|    Corrie|Van den Oord|cvandenoord0@etsy...|       true|    1000.55|   2021-01-15|2021-02-10 01:15:00|\n|  2|  Nikolaus|     Brewitt|nbrewitt1@dailyma...|       true|      900.0|   2021-02-14|2021-02-18 03:33:00|\n|  3|    Orelie|      Penney|openney2@vistapri...|       true|     850.55|   2021-01-21|2021-03-15 15:16:55|\n|  4|     Ashby|    Maddocks|  amaddocks3@home.pl|      false|        NaN|         null|2021-04-10 17:45:30|\n|  5|      Kurt|        Rome|krome4@shutterfly...|      false|        NaN|         null|2021-04-02 00:55:18|\n|  2|  Nikolaus|     Brewitt|nbrewitt1@dailyma...|       true|     1050.0|   2021-02-14|2021-02-25 03:33:00|\n+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641898674157,"submitTime":1641898674126,"finishTime":1641898675090,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"d0c7a8b2-df73-4e9d-9d53-699da484e49e"},{"version":"CommandV1","origId":1575837098435539,"guid":"6e8103b7-92be-4806-9dcc-cf7177a2085e","subtype":"command","commandType":"auto","position":5.0,"command":"users_df.distinct().count()","commandVersion":6,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">Out[9]: 6</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641898691810,"submitTime":1641898691785,"finishTime":1641898692379,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"2be10e64-d56f-4a63-bc58-78bb6a728804"},{"version":"CommandV1","origId":1575837098435540,"guid":"638976d9-f57c-4adb-813c-01bb600fab10","subtype":"command","commandType":"auto","position":6.0,"command":"help(users_df.drop_duplicates)","commandVersion":6,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">Help on method dropDuplicates in module pyspark.sql.dataframe:\n\ndropDuplicates(subset=None) method of pyspark.sql.dataframe.DataFrame instance\n    :func:`drop_duplicates` is an alias for :func:`dropDuplicates`.\n    \n    .. versionadded:: 1.4\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641898741175,"submitTime":1641898741151,"finishTime":1641898741199,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"02b14679-4c58-4030-98b8-cc2d58a8300a"},{"version":"CommandV1","origId":1575837098435541,"guid":"2adfd465-ace9-4778-84b7-36c13850d6ed","subtype":"command","commandType":"auto","position":7.0,"command":"help(users_df.dropDuplicates)","commandVersion":2,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">Help on method dropDuplicates in module pyspark.sql.dataframe:\n\ndropDuplicates(subset=None) method of pyspark.sql.dataframe.DataFrame instance\n    Return a new :class:`DataFrame` with duplicate rows removed,\n    optionally only considering certain columns.\n    \n    For a static batch :class:`DataFrame`, it just drops duplicate rows. For a streaming\n    :class:`DataFrame`, it will keep all data across triggers as intermediate state to drop\n    duplicates rows. You can use :func:`withWatermark` to limit how late the duplicate data can\n    be and system will accordingly limit the state. In addition, too late data older than\n    watermark will be dropped to avoid any possibility of duplicates.\n    \n    :func:`drop_duplicates` is an alias for :func:`dropDuplicates`.\n    \n    .. versionadded:: 1.4.0\n    \n    Examples\n    --------\n    &gt;&gt;&gt; from pyspark.sql import Row\n    &gt;&gt;&gt; df = sc.parallelize([ \\\n    ...     Row(name=&#39;Alice&#39;, age=5, height=80), \\\n    ...     Row(name=&#39;Alice&#39;, age=5, height=80), \\\n    ...     Row(name=&#39;Alice&#39;, age=10, height=80)]).toDF()\n    &gt;&gt;&gt; df.dropDuplicates().show()\n    +-----+---+------+\n    | name|age|height|\n    +-----+---+------+\n    |Alice|  5|    80|\n    |Alice| 10|    80|\n    +-----+---+------+\n    \n    &gt;&gt;&gt; df.dropDuplicates([&#39;name&#39;, &#39;height&#39;]).show()\n    +-----+---+------+\n    | name|age|height|\n    +-----+---+------+\n    |Alice|  5|    80|\n    +-----+---+------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641898753319,"submitTime":1641898753294,"finishTime":1641898753344,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"20c0c91d-ffc9-4af6-8bc9-8a66a8032615"},{"version":"CommandV1","origId":1575837098435542,"guid":"3aaab84e-6fd9-4fe0-9d66-2446f9f9c216","subtype":"command","commandType":"auto","position":8.0,"command":"# We can also drop duplicates based on certain columns\n# This will fail as the function expects sequence type object such as list or array\nusers_df.dropDuplicates('id').show()","commandVersion":50,"state":"error","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":"py4j.Py4JException: Method toSeq([class java.lang.String]) does not exist","errorTraceType":"html","error":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">Py4JError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-4320976403583805&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span><span class=\"ansi-red-fg\"> </span>users_df<span class=\"ansi-blue-fg\">.</span>dropDuplicates<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#39;id&#39;</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>show<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/dataframe.py</span> in <span class=\"ansi-cyan-fg\">dropDuplicates</span><span class=\"ansi-blue-fg\">(self, subset)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1992</span>             jdf <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>_jdf<span class=\"ansi-blue-fg\">.</span>dropDuplicates<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1993</span>         <span class=\"ansi-green-fg\">else</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">-&gt; 1994</span><span class=\"ansi-red-fg\">             </span>jdf <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>_jdf<span class=\"ansi-blue-fg\">.</span>dropDuplicates<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">.</span>_jseq<span class=\"ansi-blue-fg\">(</span>subset<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1995</span>         <span class=\"ansi-green-fg\">return</span> DataFrame<span class=\"ansi-blue-fg\">(</span>jdf<span class=\"ansi-blue-fg\">,</span> self<span class=\"ansi-blue-fg\">.</span>sql_ctx<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1996</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/dataframe.py</span> in <span class=\"ansi-cyan-fg\">_jseq</span><span class=\"ansi-blue-fg\">(self, cols, converter)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1433</span>     <span class=\"ansi-green-fg\">def</span> _jseq<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> cols<span class=\"ansi-blue-fg\">,</span> converter<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1434</span>         <span class=\"ansi-blue-fg\">&#34;&#34;&#34;Return a JVM Seq of Columns from a list of Column or names&#34;&#34;&#34;</span>\n<span class=\"ansi-green-fg\">-&gt; 1435</span><span class=\"ansi-red-fg\">         </span><span class=\"ansi-green-fg\">return</span> _to_seq<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">.</span>sql_ctx<span class=\"ansi-blue-fg\">.</span>_sc<span class=\"ansi-blue-fg\">,</span> cols<span class=\"ansi-blue-fg\">,</span> converter<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1436</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">   1437</span>     <span class=\"ansi-green-fg\">def</span> _jmap<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> jm<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/column.py</span> in <span class=\"ansi-cyan-fg\">_to_seq</span><span class=\"ansi-blue-fg\">(sc, cols, converter)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     61</span>     <span class=\"ansi-green-fg\">if</span> converter<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     62</span>         cols <span class=\"ansi-blue-fg\">=</span> <span class=\"ansi-blue-fg\">[</span>converter<span class=\"ansi-blue-fg\">(</span>c<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-green-fg\">for</span> c <span class=\"ansi-green-fg\">in</span> cols<span class=\"ansi-blue-fg\">]</span>\n<span class=\"ansi-green-fg\">---&gt; 63</span><span class=\"ansi-red-fg\">     </span><span class=\"ansi-green-fg\">return</span> sc<span class=\"ansi-blue-fg\">.</span>_jvm<span class=\"ansi-blue-fg\">.</span>PythonUtils<span class=\"ansi-blue-fg\">.</span>toSeq<span class=\"ansi-blue-fg\">(</span>cols<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     64</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     65</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansi-cyan-fg\">__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1302</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">   1303</span>         answer <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>gateway_client<span class=\"ansi-blue-fg\">.</span>send_command<span class=\"ansi-blue-fg\">(</span>command<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">-&gt; 1304</span><span class=\"ansi-red-fg\">         return_value = get_return_value(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">   1305</span>             answer, self.gateway_client, self.target_id, self.name)\n<span class=\"ansi-green-intense-fg ansi-bold\">   1306</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansi-cyan-fg\">deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    115</span>     <span class=\"ansi-green-fg\">def</span> deco<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">*</span>a<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kw<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    116</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 117</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">return</span> f<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">*</span>a<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kw<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    118</span>         <span class=\"ansi-green-fg\">except</span> py4j<span class=\"ansi-blue-fg\">.</span>protocol<span class=\"ansi-blue-fg\">.</span>Py4JJavaError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    119</span>             converted <span class=\"ansi-blue-fg\">=</span> convert_exception<span class=\"ansi-blue-fg\">(</span>e<span class=\"ansi-blue-fg\">.</span>java_exception<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/protocol.py</span> in <span class=\"ansi-cyan-fg\">get_return_value</span><span class=\"ansi-blue-fg\">(answer, gateway_client, target_id, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    328</span>                     format(target_id, &#34;.&#34;, name), value)\n<span class=\"ansi-green-intense-fg ansi-bold\">    329</span>             <span class=\"ansi-green-fg\">else</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 330</span><span class=\"ansi-red-fg\">                 raise Py4JError(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    331</span>                     <span class=\"ansi-blue-fg\">&#34;An error occurred while calling {0}{1}{2}. Trace:\\n{3}\\n&#34;</span><span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    332</span>                     format(target_id, &#34;.&#34;, name, value))\n\n<span class=\"ansi-red-fg\">Py4JError</span>: An error occurred while calling z:org.apache.spark.api.python.PythonUtils.toSeq. Trace:\npy4j.Py4JException: Method toSeq([class java.lang.String]) does not exist\n\tat py4j.reflection.ReflectionEngine.getMethod(ReflectionEngine.java:341)\n\tat py4j.reflection.ReflectionEngine.getMethod(ReflectionEngine.java:362)\n\tat py4j.Gateway.invoke(Gateway.java:289)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:251)\n\tat java.lang.Thread.run(Thread.java:748)\n\n</div>","workflows":[],"startTime":1641898870066,"submitTime":1641898870066,"finishTime":1641898870308,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"5a7c11a2-0d5f-4edf-9633-8021e74f3a76"},{"version":"CommandV1","origId":1575837098435543,"guid":"2d2ae0b8-8033-4dae-a8c8-12b546df5237","subtype":"command","commandType":"auto","position":9.0,"command":"users_df.dropDuplicates(['id']).show()","commandVersion":2,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n| id|first_name|   last_name|               email|is_customer|amount_paid|customer_from|    last_updated_ts|\n+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n|  1|    Corrie|Van den Oord|cvandenoord0@etsy...|       true|    1000.55|   2021-01-15|2021-02-10 01:15:00|\n|  2|  Nikolaus|     Brewitt|nbrewitt1@dailyma...|       true|      900.0|   2021-02-14|2021-02-18 03:33:00|\n|  3|    Orelie|      Penney|openney2@vistapri...|       true|     850.55|   2021-01-21|2021-03-15 15:16:55|\n|  4|     Ashby|    Maddocks|  amaddocks3@home.pl|      false|        NaN|         null|2021-04-10 17:45:30|\n|  5|      Kurt|        Rome|krome4@shutterfly...|      false|        NaN|         null|2021-04-02 00:55:18|\n+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641898949670,"submitTime":1641898949619,"finishTime":1641898950790,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"e98b9036-be37-43be-a203-fb31b82df3bd"},{"version":"CommandV1","origId":1575837098435544,"guid":"cf21c17a-a825-4a45-942a-e26388ad4f6a","subtype":"command","commandType":"auto","position":10.0,"command":"users_df.dropDuplicates(['id', 'amount_paid']).show()","commandVersion":4,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n| id|first_name|   last_name|               email|is_customer|amount_paid|customer_from|    last_updated_ts|\n+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n|  1|    Corrie|Van den Oord|cvandenoord0@etsy...|       true|    1000.55|   2021-01-15|2021-02-10 01:15:00|\n|  2|  Nikolaus|     Brewitt|nbrewitt1@dailyma...|       true|      900.0|   2021-02-14|2021-02-18 03:33:00|\n|  2|  Nikolaus|     Brewitt|nbrewitt1@dailyma...|       true|     1050.0|   2021-02-14|2021-02-25 03:33:00|\n|  3|    Orelie|      Penney|openney2@vistapri...|       true|     850.55|   2021-01-21|2021-03-15 15:16:55|\n|  4|     Ashby|    Maddocks|  amaddocks3@home.pl|      false|        NaN|         null|2021-04-10 17:45:30|\n|  5|      Kurt|        Rome|krome4@shutterfly...|      false|        NaN|         null|2021-04-02 00:55:18|\n+---+----------+------------+--------------------+-----------+-----------+-------------+-------------------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1641898972684,"submitTime":1641898972661,"finishTime":1641898973814,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultSubCmdIds":[],"tableResultIndex":null,"nuid":"5a03a477-80e8-4cca-ba5a-2f5ff90517da"}],"dashboards":[],"guid":"f95e168e-9c3e-4b74-a970-f22d0381839a","globalVars":{},"iPythonMetadata":null,"inputWidgets":{},"notebookMetadata":{"pythonIndentUnit":4}}